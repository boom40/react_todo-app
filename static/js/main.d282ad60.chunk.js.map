{"version":3,"sources":["TodoInput.js","TodoItem.js","TodoList.js","TodosFilter.js","App.js","index.js"],"names":["TodoInput","state","createNewTodo","enterNewTodo","event","_this","setState","target","value","editTodos","preventDefault","length","props","addNewTodo","this","react_default","a","createElement","onSubmit","className","placeholder","onChange","React","Component","TodoItem","_ref","todo","changeStateComplete","deleteTodo","index","id","checked","complete","type","title","onClick","TodoList","filtresTodos","map","i","key","src_TodoItem","TodosFilter","idFiltres","setIdFiltres","filtersList","item","href","App","todosList","isCompleted","Date","concat","Object","toConsumableArray","clearCompleted","filter","lengthCompeletedTodos","x","stateCompleted","checkboxValue","allSelectTodo","objectSpread2","todoId","setTimeout","editAllChecked","splice","_this2","_this$state","src_TodoInput","style","display","htmlFor","src_TodoList","src_TodosFilter","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d282ad60.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoInput extends React.Component {\n  state = {\n    createNewTodo: '',\n  }\n\n  enterNewTodo = (event) => {\n    this.setState({ createNewTodo: event.target.value });\n  };\n\n  editTodos = (event) => {\n    event.preventDefault();\n    if (!this.state.createNewTodo.length) {\n      return;\n    }\n\n    this.props.addNewTodo(this.state.createNewTodo);\n    this.setState({ createNewTodo: '' });\n  }\n\n  render() {\n    const { createNewTodo } = this.state;\n\n    return (\n      <form onSubmit={this.editTodos}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={this.enterNewTodo}\n          value={createNewTodo}\n        />\n      </form>\n    );\n  }\n}\n\nTodoInput.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ todo, changeStateComplete, deleteTodo, index }) => (\n  <div className=\"view\">\n    <input\n      onChange={() => changeStateComplete(todo.id)}\n      checked={todo.complete}\n      type=\"checkbox\"\n      className=\"toggle\"\n    />\n    <label\n      className={todo.complete ? 'view__completed' : ''}\n    >\n      {todo.title}\n    </label>\n    <button\n      onClick={() => deleteTodo(index)}\n      type=\"button\"\n      className=\"destroy\"\n    />\n  </div>\n);\n\nTodoItem.propTypes = {\n  changeStateComplete: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired,\n  todo: PropTypes.shape({\n    complete: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    id: PropTypes.number,\n    title: PropTypes.string,\n  }).isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ filtresTodos, changeStateComplete, deleteTodo }) => (\n  <ul className=\"todo-list\">\n    {filtresTodos.map((todo, i) => (\n      <li key={todo.id}>\n        <TodoItem\n          index={i}\n          todo={todo}\n          changeStateComplete={changeStateComplete}\n          deleteTodo={deleteTodo}\n        />\n      </li>\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  filtresTodos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  changeStateComplete: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodosFilter = ({ idFiltres, setIdFiltres, filtersList }) => (\n  <ul className=\"filters\">\n    {filtersList.map(item => (\n      <li key={item.title}>\n        <a\n          href=\"#/\"\n          className={idFiltres === item.id ? 'selected' : ''}\n          id={item.id}\n          onClick={() => setIdFiltres(item.id)}\n        >\n          {item.title}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  idFiltres: PropTypes.string.isRequired,\n  setIdFiltres: PropTypes.func.isRequired,\n  filtersList: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport TodoInput from './TodoInput';\nimport TodoList from './TodoList';\nimport TodosFilter from './TodosFilter';\n\nclass App extends React.Component {\n  state ={\n    idFiltres: '',\n    todosList: [],\n    isCompleted: false,\n    filtersList: [{\n      id: 'filtersAll', title: 'All',\n    },\n    {\n      id: 'filtersActive', title: 'Active',\n    },\n    {\n      id: 'filtersCompleted', title: 'Completed',\n    },\n    ],\n  }\n\n  addNewTodo = (createNewTodo) => {\n    this.setState(() => {\n      const { todosList } = this.state;\n      const todo = {\n        complete: false,\n        id: +new Date(),\n        title: createNewTodo,\n      };\n\n      return {\n        todosList: [...todosList, todo],\n        createNewTodo: '',\n      };\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(state => ({\n      todosList: state.todosList.filter(todo => !todo.complete),\n    }));\n  }\n\n  lengthCompeletedTodos = x => (\n    this.state.todosList.filter(todo => todo.complete === x).length\n  )\n\n  setIdFiltres = (stateCompleted) => {\n    this.setState({ idFiltres: stateCompleted });\n  }\n\n  filtresTodos = () => {\n    switch (this.state.idFiltres) {\n      case 'filtersActive':\n        return this.state.todosList.filter(todo => !todo.complete);\n      case 'filtersCompleted':\n        return this.state.todosList.filter(todo => todo.complete === true);\n      default: return this.state.todosList;\n    }\n  }\n\n  checkboxValue = (event) => {\n    this.setState({ isCompleted: event.target.checked });\n    this.allSelectTodo(this.state.isCompleted);\n  };\n\n  allSelectTodo = (x) => {\n    this.setState(state => ({\n      todosList: state.todosList.map(todo => (\n        {\n          ...todo, complete: !x,\n        })),\n    }));\n  }\n\n  changeStateComplete = (todoId) => {\n    this.setState(state => ({\n      todosList: state.todosList.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          complete: !todo.complete,\n        };\n      }),\n    }));\n    setTimeout(this.editAllChecked);\n  }\n\n  editAllChecked = () => {\n    if (this.state.todosList\n      .filter(todo => !todo.complete).length === 0) {\n      this.setState({ isCompleted: true });\n    }\n\n    if (this.state.todosList\n      .filter(todo => !todo.complete).length > 0) {\n      this.setState({ isCompleted: false });\n    }\n  }\n\n  deleteTodo = (i) => {\n    this.setState(state => state.todosList.splice(i, 1));\n  }\n\n  render() {\n    const { todosList,\n      isCompleted,\n      idFiltres,\n      filtersList } = this.state;\n\n    const { changeStateComplete,\n      deleteTodo,\n      setIdFiltres,\n      addNewTodo } = this;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <TodoInput\n            addNewTodo={addNewTodo}\n          />\n        </header>\n\n        <section\n          className=\"main\"\n          style={{ display: 'block' }}\n        >\n          <input\n            onChange={this.checkboxValue}\n            checked={isCompleted}\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            filtresTodos={this.filtresTodos()}\n            changeStateComplete={changeStateComplete}\n            deleteTodo={deleteTodo}\n          />\n        </section>\n\n        <footer\n          className=\"footer\"\n          style={{\n            display: `${todosList.length > 0 ? 'block' : 'none'}`,\n          }}\n        >\n          <span className=\"todo-count\">\n            {this.lengthCompeletedTodos(false)}\n            {` items left`}\n          </span>\n          <TodosFilter\n            setIdFiltres={setIdFiltres}\n            idFiltres={idFiltres}\n            filtersList={filtersList}\n          />\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            style={{\n              display: `${this.lengthCompeletedTodos(true) > 0\n                ? 'block' : 'none'}`,\n            }}\n            onClick={() => this.clearCompleted()}\n          >\n            Clear-completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}